{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ponkis01/BusinessAnalytics/blob/main/GoogleColab_code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f7d2f912-4bfc-4be4-b1dd-71da0c18195b",
      "metadata": {
        "id": "f7d2f912-4bfc-4be4-b1dd-71da0c18195b"
      },
      "source": [
        "# Cleaning"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f0587b3b-d0b5-4a03-95b9-806ba0958801",
      "metadata": {
        "id": "f0587b3b-d0b5-4a03-95b9-806ba0958801",
        "outputId": "d34754e2-97ff-4769-9a41-a0d321154dab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        }
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/content/WA_Fn-UseC_-HR-Employee-Attrition.xls'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-b7ab19b17b08>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Importieren des Datensatzes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/WA_Fn-UseC_-HR-Employee-Attrition.xls\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/WA_Fn-UseC_-HR-Employee-Attrition.xls'"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Importieren des Datensatzes\n",
        "df = pd.read_csv(\"/content/WA_Fn-UseC_-HR-Employee-Attrition.xls\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "87403a5c-86c5-4cc3-9697-df276b8459d4",
      "metadata": {
        "id": "87403a5c-86c5-4cc3-9697-df276b8459d4"
      },
      "outputs": [],
      "source": [
        "# Einstellung um den ganzen datensatz zu sehen\n",
        "pd.set_option('display.max_columns', None)\n",
        "pd.set_option('display.expand_frame_repr', False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c78f1898-066b-42db-bc20-a87dd603d3c5",
      "metadata": {
        "collapsed": true,
        "id": "c78f1898-066b-42db-bc20-a87dd603d3c5"
      },
      "outputs": [],
      "source": [
        "# Nach fehlenden Daten suchen\n",
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "085a683c-8281-48ba-a1a3-1f424570ea26",
      "metadata": {
        "collapsed": true,
        "id": "085a683c-8281-48ba-a1a3-1f424570ea26"
      },
      "outputs": [],
      "source": [
        "import seaborn as sns\n",
        "\n",
        "# Identifizieren ob es eine Korrelation zwischen den verschiedenen Bezahlungen gibt gibt.\n",
        "# Falls es diese gibt k√∂nnte man die Bezahlung auch mit einer Variablen beschreiben um das Modell leichter interpretierbar zu machen.\n",
        "df2 = df[[\"DailyRate\", \"HourlyRate\", \"MonthlyRate\", \"MonthlyIncome\"]]\n",
        "correlation_matrix = df2.corr()\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\", fmt=\".2f\")\n",
        "plt.title(\"Correlation Matrix\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "73a118c9-bcdb-4a1f-8ad1-f98632accc22",
      "metadata": {
        "collapsed": true,
        "id": "73a118c9-bcdb-4a1f-8ad1-f98632accc22"
      },
      "outputs": [],
      "source": [
        "# Identifizieren ob es eine Korrelation zwischen YearsWithCurrManager, YearsInCurrentRole und YearsAtCompany gibt.\n",
        "# Da YearsAtCompany predicted wird wollen wir andere √§hnlche und stark korrelierende Variablen l√∂schen.\n",
        "\n",
        "df3 = df[[\"YearsWithCurrManager\", \"YearsInCurrentRole\", \"YearsAtCompany\"]]\n",
        "correlation_matrix = df3.corr()\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\", fmt=\".2f\")\n",
        "plt.title(\"Correlation Matrix\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b66153ad-babc-4d9f-af31-c9378acfbfd0",
      "metadata": {
        "id": "b66153ad-babc-4d9f-af31-c9378acfbfd0"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sksurv.util import Surv\n",
        "\n",
        "# Droppen von Variable die nicht genutzt werden k√∂nnen\n",
        "df = df.drop(['EmployeeCount', 'EmployeeNumber', 'StandardHours', 'YearsWithCurrManager', 'YearsInCurrentRole'], axis=1)\n",
        "\n",
        "#Die Daten m√ºssen verwertbar sein d.h. fehlerfrei und einheitlich formatiert sein.\n",
        "#Unn√∂tige Daten werden entfernt.\n",
        "#Aufteilung in kategorische und numerische Spalten um diese sp√§ter besser verarbeiten zu k√∂nnen.\n",
        "\n",
        "# Konvertieren von gewissen Variablen zu kathegorischen Variablen\n",
        "categorical_columns = [\n",
        "    'Attrition', 'BusinessTravel', 'Department', 'Education', 'Gender',\n",
        "    'EducationField', 'JobRole', 'MaritalStatus', 'Over18', 'OverTime',\n",
        "    'StockOptionLevel', 'EnvironmentSatisfaction', 'JobInvolvement',\n",
        "    'JobSatisfaction', 'PerformanceRating', 'RelationshipSatisfaction',\n",
        "    'WorkLifeBalance'\n",
        "]\n",
        "df[categorical_columns] = df[categorical_columns].astype('category')\n",
        "\n",
        "# Skalieren der numerischen Werte\n",
        "variables_to_scale = [\n",
        "    'Age', 'DailyRate', 'DistanceFromHome', 'HourlyRate', 'MonthlyIncome',\n",
        "    'MonthlyRate', 'NumCompaniesWorked', 'PercentSalaryHike',\n",
        "    'TotalWorkingYears', 'TrainingTimesLastYear', 'YearsSinceLastPromotion'\n",
        "]\n",
        "df_mean = df[variables_to_scale].mean()\n",
        "df_std = df[variables_to_scale].std()\n",
        "df[variables_to_scale] = (df[variables_to_scale] - df_mean) / df_std\n",
        "\n",
        "# Encoden der kategorischen Variablen\n",
        "# Hier weisen wir jedem kategorischen Wert eine Zahl zu. Das erlaubt den Modellen leichter mit den Variablen zu arbeiten.\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "columns_to_encode = ['BusinessTravel', 'Department',\n",
        "                     'EducationField', 'Gender', 'JobRole',\n",
        "                     'MaritalStatus', 'OverTime', 'Over18', 'Attrition']\n",
        "label_encoder = LabelEncoder()\n",
        "for col in columns_to_encode:\n",
        "    df[col] = label_encoder.fit_transform(df[col])\n",
        "    df[col] = df[col].astype('category')\n",
        "\n",
        "\n",
        "# Strukturieren das Datensatzes in X und y (y Werte werden in einen strukturierten Array umgewandelt (Survival, Time)\n",
        "event_column = df['Attrition'].astype(int)\n",
        "time_column = df['YearsAtCompany']\n",
        "\n",
        "# da wir eine Survival analyse machen ist unser y Datensatz ein Array mit √úberleben(ja/nein) und √úberlebenszeit.\n",
        "survival_data = Surv.from_arrays(event=event_column, time=time_column)\n",
        "X = df.drop(['Attrition', 'YearsAtCompany'], axis=1)\n",
        "y = survival_data\n",
        "\n",
        "# Train und Test Aufteilung\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=12)\n",
        "\n",
        "y_train_event = y_train['event']\n",
        "y_train_time = y_train['time']\n",
        "y_test_event = y_test['event']\n",
        "y_test_time = y_test['time']"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "56e216b2-1cff-4628-b757-178f7bd3981d",
      "metadata": {
        "id": "56e216b2-1cff-4628-b757-178f7bd3981d"
      },
      "source": [
        "# XGBoost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b2cf7fed-38a6-4554-81af-ede2d3841b54",
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b2cf7fed-38a6-4554-81af-ede2d3841b54",
        "outputId": "89768309-a130-4f84-9115-2f6bf0a58ecc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Concordance Index (Training): 0.879\n",
            "Concordance Index (Testing): 0.805\n"
          ]
        }
      ],
      "source": [
        "import xgboost as xgb\n",
        "from sksurv.metrics import concordance_index_censored\n",
        "\n",
        "# Initialisieren des Modells\n",
        "xgb_model = xgb.XGBRegressor(\n",
        "    enable_categorical=True,\n",
        "    # Das objective erlaubt uns aus dem standart XGB Modell eine Cox Survival Analyse zu machen.\n",
        "    objective='survival:cox',\n",
        ")\n",
        "xgb_model.fit(X_train, y_train_time, sample_weight=y_train_event)\n",
        "\n",
        "# Vorhersagen der Train und Test Risikowerte\n",
        "xgb_risk_scores_train = xgb_model.predict(X_train)\n",
        "xgb_risk_scores_test = xgb_model.predict(X_test)\n",
        "\n",
        "# Berechnen des Concordance Indexes\n",
        "xgb_c_index_train = concordance_index_censored(y_train_event, y_train_time, xgb_risk_scores_train)[0]\n",
        "xgb_c_index_test = concordance_index_censored(y_test_event, y_test_time, xgb_risk_scores_test)[0]\n",
        "\n",
        "print(f\"Concordance Index (Training): {xgb_c_index_train:.3f}\")\n",
        "print(f\"Concordance Index (Testing): {xgb_c_index_test:.3f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8c313d6c-7e3c-469d-b800-71eaf1ff281d",
      "metadata": {
        "id": "8c313d6c-7e3c-469d-b800-71eaf1ff281d"
      },
      "source": [
        "Der Concordance Index zeigt uns an, wie gut das Modell die Reihenfolge der \"√úberlebenszeiten\" der verschiedenen Angestellten vorhersagt. Er sagt uns, wie gut das Modell in der Lage ist, f√ºr zwei beliebig ausgew√§hlte Individuen die Rangfolge ihrer erwarteten √úberlebenszeiten oder Risiken korrekt vorherzusagen. Ein Wert von 0.5 w√ºrde also aussagen dass das Modell keine Predictive Power hat und ein Wert von 1 dass das Modell alle Reihenfolgen richtig verhersagt."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "08dc0443-a477-44ed-9edd-24a8a9f01535",
      "metadata": {
        "id": "08dc0443-a477-44ed-9edd-24a8a9f01535"
      },
      "source": [
        "# XGBSE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b89614d8-831b-483f-af98-084d81331f04",
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b89614d8-831b-483f-af98-084d81331f04",
        "outputId": "438851ed-bfa6-4074-cfa4-8cb4f6fcacab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/xgbse/non_parametric.py:61: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  return pd.DataFrame(C_exp).fillna(method=\"bfill\").fillna(method=\"ffill\").values\n",
            "/usr/local/lib/python3.10/dist-packages/xgbse/non_parametric.py:61: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  return pd.DataFrame(C_exp).fillna(method=\"bfill\").fillna(method=\"ffill\").values\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Concordance Index (Training): 0.907\n",
            "Concordance Index (Testing): 0.772\n"
          ]
        }
      ],
      "source": [
        "from xgbse import XGBSEKaplanNeighbors\n",
        "from xgbse.converters import convert_to_structured\n",
        "from xgbse.metrics import concordance_index\n",
        "\n",
        "# Initialisieren des Modells\n",
        "xgbse_model = XGBSEKaplanNeighbors(enable_categorical = True)\n",
        "xgbse_model.fit(X_train, y_train)\n",
        "\n",
        "# Vorhersagen der Train und Test Risikowerte\n",
        "xgb_risk_scores_train = xgbse_model.predict(X_train)\n",
        "xgb_risk_scores_test = xgbse_model.predict(X_test)\n",
        "\n",
        "# Berechnen des Concordance Indexes\n",
        "xgb_c_index_train = concordance_index(y_train, xgb_risk_scores_train)\n",
        "xgb_c_index_test = concordance_index(y_test, xgb_risk_scores_test)\n",
        "\n",
        "print(f\"Concordance Index (Training): {xgb_c_index_train:.3f}\")\n",
        "print(f\"Concordance Index (Testing): {xgb_c_index_test:.3f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fdbca0ec-5c8b-4894-b9de-67d35909faac",
      "metadata": {
        "id": "fdbca0ec-5c8b-4894-b9de-67d35909faac"
      },
      "source": [
        "# Random Survival Forest"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Das RSF Modell ist eine statistische Methode, welche Ereigniszeiten modelliert und versucht die Dauer bis zum eintreffen des Ereignisses vorherzusagen. Es basiert auf Bootstrap-Sampling (Datensatz ins zuf√§llige Teile splitten), Baumerstellung (Baum splittet Daten basierend auf √úberlebensinformationen und speichert diese in den Bl√§ttern) und Aggregation (√úberlebenswahrscheinlichkeit eines neuen Datenpunkts wird als Durchschnitt der Vorhersagen aus allen B√§umen berechnet).\n",
        "\\\n",
        "Im Endeffekt sagt der Random Survival Forest f√ºr jede Beobachtung eine Hazard-Kurve vorher. Diese kann in eine Survival-Kurve umgewandelt werden, die die Wahrscheinlichkeit angibt, dass ein Individuum √ºber einen bestimmten Zeitpunkt hinaus √ºberlebt."
      ],
      "metadata": {
        "id": "csiUWuI8q99y"
      },
      "id": "csiUWuI8q99y"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3e3d1e52-c195-412a-b4c9-d8d072c7bcd0",
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3e3d1e52-c195-412a-b4c9-d8d072c7bcd0",
        "outputId": "4ea4c6c6-f092-455e-cafd-3defa37b4f80"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Concordance Index (Train): 0.972\n",
            "Concordance Index (Test): 0.834\n"
          ]
        }
      ],
      "source": [
        "from sksurv.ensemble import RandomSurvivalForest\n",
        "from sksurv.util import Surv\n",
        "\n",
        "# Trainieren des Modells\n",
        "rsf_model = RandomSurvivalForest()\n",
        "rsf_model.fit(X_train, y_train)\n",
        "\n",
        "# Vorhersagen der Trainings- und Testdaten\n",
        "rsf_risk_scores_train = rsf_model.predict(X_train)\n",
        "rsf_risk_scores_test = rsf_model.predict(X_test)\n",
        "\n",
        "# Berechnen des C Indexes\n",
        "rsf_c_index_train = concordance_index_censored(y_train['event'], y_train['time'], rsf_risk_scores_train)[0]\n",
        "rsf_c_index_test = concordance_index_censored(y_test['event'], y_test['time'], rsf_risk_scores_test)[0]\n",
        "\n",
        "print(f\"Concordance Index (Training): {rsf_c_index_train:.3f}\")\n",
        "print(f\"Concordance Index (Testing): {rsf_c_index_test:.3f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cda10070-85f0-4f17-86dc-c97cbbd18d13",
      "metadata": {
        "id": "cda10070-85f0-4f17-86dc-c97cbbd18d13"
      },
      "source": [
        "Der Random Survival Forest schneidet ohne Tuning am besten von allen Modellen ab. Deswegen haben wir uns entschieden, mit diesem Modell weiterzuarbeiten."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tuning"
      ],
      "metadata": {
        "id": "satb56U9rFhX"
      },
      "id": "satb56U9rFhX"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Da GridSearchCV weder nach dem C-Index optimieren kann noch strukturierte Arrays als Zielvariablen unterst√ºtzt, m√ºssen wir das Modell mit Hyperopt manuell optimieren.\n"
      ],
      "metadata": {
        "id": "Z3qW_1mBrB_D"
      },
      "id": "Z3qW_1mBrB_D"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a42de75d-c007-4689-9cb7-2ae7c03ef726",
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a42de75d-c007-4689-9cb7-2ae7c03ef726",
        "outputId": "a9ee1ed2-5688-4382-fcda-81cce769b5b1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 50/50 [17:01<00:00, 20.42s/trial, best loss: -0.8704109082756183]\n"
          ]
        }
      ],
      "source": [
        "from hyperopt import fmin, tpe, hp, Trials\n",
        "from sksurv.metrics import concordance_index_censored\n",
        "from sksurv.ensemble import RandomSurvivalForest\n",
        "from sklearn.model_selection import KFold\n",
        "import numpy as np\n",
        "\n",
        "# Zielfunktion erstellen\n",
        "def objective(params):\n",
        "    # Erstellen des Random Survival Forest mit variablen Parametern\n",
        "    model = RandomSurvivalForest(\n",
        "        n_estimators=int(params['n_estimators']),\n",
        "        max_depth=int(params['max_depth']) if params['max_depth'] is not None else None,\n",
        "        min_samples_split=int(params['min_samples_split']),\n",
        "        min_samples_leaf=int(params['min_samples_leaf']),\n",
        "        max_features=params['max_features'],\n",
        "        random_state=12\n",
        "    )\n",
        "\n",
        "    # Cross Validation\n",
        "    kf = KFold(n_splits=5, shuffle=True, random_state=12)\n",
        "    c_index_scores = []\n",
        "\n",
        "    for train_index, test_index in kf.split(X_train):\n",
        "        X_train_cv, X_test_cv = X.iloc[train_index], X.iloc[test_index]\n",
        "        y_train_cv, y_test_cv = y[train_index], y[test_index]\n",
        "\n",
        "        model.fit(X_train_cv, y_train_cv)\n",
        "        predictions = model.predict(X_test_cv)\n",
        "\n",
        "        c_index = concordance_index_censored(y_test_cv['event'], y_test_cv['time'], predictions)[0]\n",
        "        c_index_scores.append(c_index)\n",
        "\n",
        "    # Durchschnitt des Konkordanz-Index f√ºr alle CV Folds berechnen\n",
        "    mean_c_index = np.mean(c_index_scores)\n",
        "\n",
        "    # Hyperopt minimiert die Zielfunktion, also geben wir den negativen C-Index an\n",
        "    return -mean_c_index\n",
        "\n",
        "# Hyperparametergrid erstellen\n",
        "space = {\n",
        "    'n_estimators': hp.choice('n_estimators', [100, 200, 500, 1000]),\n",
        "    'max_depth': hp.choice('max_depth', [None, 10, 20, 30, 50]),\n",
        "    'min_samples_split': hp.quniform('min_samples_split', 2, 20, 1),\n",
        "    'min_samples_leaf': hp.quniform('min_samples_leaf', 1, 10, 1),\n",
        "    'max_features': hp.choice('max_features', ['sqrt', 'log2', None])\n",
        "}\n",
        "\n",
        "# Optimierung starten\n",
        "trials = Trials()\n",
        "best = fmin(\n",
        "    fn=objective,\n",
        "    space=space,\n",
        "    algo=tpe.suggest,\n",
        "    max_evals=50,\n",
        "    trials=trials\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c85f8fee-0c67-4b73-9928-6b3de1340f22",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c85f8fee-0c67-4b73-9928-6b3de1340f22",
        "outputId": "e07003c4-f6a8-4412-9237-8ca2ce8268b1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'bootstrap': True,\n",
              " 'low_memory': False,\n",
              " 'max_depth': None,\n",
              " 'max_features': 'log2',\n",
              " 'max_leaf_nodes': None,\n",
              " 'max_samples': None,\n",
              " 'min_samples_leaf': 1,\n",
              " 'min_samples_split': 2,\n",
              " 'min_weight_fraction_leaf': 0.0,\n",
              " 'n_estimators': 1000,\n",
              " 'n_jobs': None,\n",
              " 'oob_score': False,\n",
              " 'random_state': 12,\n",
              " 'verbose': 0,\n",
              " 'warm_start': False}"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "# Fitting des Modells mit optimalen Prametern\n",
        "optimal_model = RandomSurvivalForest(\n",
        "    n_estimators=[100, 200, 500, 1000][best['n_estimators']],\n",
        "    max_depth=[None, 10, 20, 30, 50][best['max_depth']],\n",
        "    min_samples_split=int(best['min_samples_split']),\n",
        "    min_samples_leaf=int(best['min_samples_leaf']),\n",
        "    max_features=['sqrt', 'log2', None][best['max_features']],\n",
        "    random_state=12\n",
        ")\n",
        "optimal_model.fit(X_train, y_train)\n",
        "optimal_model.get_params()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Evaluieren des Modells"
      ],
      "metadata": {
        "id": "fvAHhc48rJCi"
      },
      "id": "fvAHhc48rJCi"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dc984b11-ce8b-4a50-ba0e-47c3371ef9b6",
      "metadata": {
        "collapsed": true,
        "id": "dc984b11-ce8b-4a50-ba0e-47c3371ef9b6"
      },
      "outputs": [],
      "source": [
        "# Visualisieren der Verteilung der Risiko Scores\n",
        "# Wir schauen uns die Riskiowerte an um zu entschieden ob es besonders hohe Werte gibt.\n",
        "# Wenn man exp(Risikowert) berechnet erh√§lt man das Hazard Ratio des Individuums relativ zum Baseline-Risiko\n",
        "risk_scores = optimal_model.predict(X_train)\n",
        "plt.hist(risk_scores, bins=50, edgecolor='k')\n",
        "plt.title(\"Distribution of Risk Scores\")\n",
        "plt.xlabel(\"Risk Score\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Unsere Risikowerte sind relative hoch. Wir interpretieren daraus, dass es starke Unterschiede zwischen den Individuen gibt die sich auf die Survival time auswirken.\n",
        "Um zu schuane ob es Ausrei√üer in den Daten gibt schauen wir uns die Individuen mit den h√∂chsten Risikowerten an."
      ],
      "metadata": {
        "id": "yP-5P3r5jiRC"
      },
      "id": "yP-5P3r5jiRC"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b3cff105-a79e-46aa-bbfc-2b01c9b38697",
      "metadata": {
        "id": "b3cff105-a79e-46aa-bbfc-2b01c9b38697"
      },
      "outputs": [],
      "source": [
        "X_test[rsf_risk_scores_test > 20]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "47fd6efa-bf3c-4bfa-b20c-e0b4028601d7",
      "metadata": {
        "id": "47fd6efa-bf3c-4bfa-b20c-e0b4028601d7"
      },
      "source": [
        "Es gibt keine Besonderheiten oder extremen Werte bei Individuen mit hohen Risikowerten."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3586ff75-b9cc-451b-8e1e-07be34f69a4c",
      "metadata": {
        "id": "3586ff75-b9cc-451b-8e1e-07be34f69a4c"
      },
      "outputs": [],
      "source": [
        "from sklearn.inspection import permutation_importance\n",
        "\n",
        "# Bestimmen der Permutation Importances\n",
        "perm_importance = permutation_importance(optimal_model, X_test, y_test, n_repeats=10, random_state=42)\n",
        "\n",
        "# Erstellen einen Dataframes von Feature und Importance\n",
        "feature_importance_df = pd.DataFrame({\n",
        "    \"Feature\": X_test.columns,\n",
        "    \"Importance\": perm_importance.importances_mean\n",
        "})\n",
        "feature_importance_df = feature_importance_df.sort_values(by=\"Importance\", ascending=False)\n",
        "\n",
        "# Erstellen des Permutation Importance Plots\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.barh(feature_importance_df[\"Feature\"], feature_importance_df[\"Importance\"], color=\"skyblue\")\n",
        "plt.xlabel(\"Mean Ver√§nderung des Concordance Indexes\")\n",
        "plt.ylabel(\"Feature\")\n",
        "plt.title(\"Permutation Wichtigkeit f√ºr den Random Survival Forest\")\n",
        "plt.gca().invert_yaxis()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Im folgenden Teil versuchen wir, die vorhergesagte durchschnittliche √úberlebenszeit des gesamten Testdatensatzes mit der tats√§chlichen √úberlebenszeit zu vergleichen.\n",
        "\\\n",
        "Der Random Survival Forest sch√§tzt lediglich eine Hazard-Funktion, die in eine Survival-Kurve umgewandelt werden muss.\n",
        "\\\n",
        "Au√üerdem verf√ºgen wir nicht √ºber die direkte √úberlebenszeit f√ºr alle Individuen im Datensatz, da viele noch bei IBM arbeiten. Deshalb m√ºssen wir die durchschnittliche √úberlebenszeit mithilfe des Kaplan-Meier-Fitters berechnen."
      ],
      "metadata": {
        "id": "FsA7CBYVm71x"
      },
      "id": "FsA7CBYVm71x"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7f1e82fb-2c33-4284-9330-dae1084bb391",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7f1e82fb-2c33-4284-9330-dae1084bb391",
        "outputId": "8331385e-4b3b-4602-881d-81acaa2b5b7b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vorhergesagte Mean Survival Time: 29.62\n",
            "Bereinigte Beobachtete Mean Survival Time: 27.17\n"
          ]
        }
      ],
      "source": [
        "from lifelines import KaplanMeierFitter\n",
        "import numpy as np\n",
        "\n",
        "# Vorhersage der √úberlebenskurven f√ºr jede Person im Test Datensatz\n",
        "predicted_survival_curves = optimal_model.predict_survival_function(X_test)\n",
        "\n",
        "# Berechnung der erwarteten √úberlebenszeit f√ºr jede Person\n",
        "expected_survival_times = []\n",
        "for survival_curve in predicted_survival_curves:\n",
        "    time_points = survival_curve.x\n",
        "    survival_probs = survival_curve.y\n",
        "    time_diffs = np.diff(np.append(0, time_points))\n",
        "    expected_time = np.sum(survival_probs * time_diffs)\n",
        "    expected_survival_times.append(expected_time)\n",
        "\n",
        "# Berechnung der mean vorhergesagten √úberlebenszeit\n",
        "expected_survival_times = np.array(expected_survival_times)\n",
        "predicted_mean_time = expected_survival_times.mean()\n",
        "print(f\"Vorhergesagte Mean Survival Time: {predicted_mean_time:.2f}\")\n",
        "\n",
        "# Kaplan Meier Sch√§tzung (Fitter)\n",
        "# Ist eine statistische Methode zur Sch√§tzung der √úberlebenswahrscheinlichtkeit (Eintreffen eines Ereignisses), √ºber die Zeit.\n",
        "# Wir benutzen diese Mehtode da mna nicht dirkt die beobachtete √úberlebenszeit berechnen kann, da viele Angestellte noch im Unternehmen sind.\n",
        "#  ->  Liefert eine Treppenfunktion, welche bei jedem Ereigniszeitpunkt abnimmt.\n",
        "#  ->  Ber√ºcksichtigt zensierte Daten (Daten bei denen das Ereignis nicht im Beobachtungszeitraum eintritt) und entfernt diese aus der Berechnung.\n",
        "\n",
        "# Anpassen des Kaplan-Meier-Modells an die Test Daten\n",
        "kmf_test = KaplanMeierFitter()\n",
        "kmf_test.fit(y_test_time, event_observed=y_test_event)\n",
        "\n",
        "# Extraktion der √úKaplan-Meier-bereinigten beobachteten mittleren √úberlebenszeit\n",
        "survival_probs = kmf_test.survival_function_.values.flatten()\n",
        "time_points = kmf_test.survival_function_.index.values\n",
        "time_diffs = np.diff(np.append(0, time_points))\n",
        "adjusted_mean_time = np.sum(survival_probs * time_diffs)\n",
        "print(f\"Bereinigte Beobachtete Mean Survival Time: {adjusted_mean_time:.2f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Im folgenden Teil versuchen wir, die Survival Analysis als Klassifizierungsproblem umzugestalten. Dabei schauen wir, ob √ºber einen gewissen Zeitraum die Angestellten tats√§chlich im Unternehmen geblieben sind. Das Modell mithilfe des Kaplan Meier Fitters sagt gleichzeitig die √úberlebenswahrscheinlichkeit f√ºr diesen Zeitraum aus. Bei einer Wahrscheinlichkeit von 0.5 und dar√ºber wird also vorhergesagt, dass die Person √ºberlebt. So k√∂nnen wir Metriken wie Accuracy etc. berechnen. Wir nehmen heirf√ºr den ganzen Datensatz, da die Anzahl der Leute die das Unternehmen bereits verlassen, sowieso relativ klein ist, w√§re es nicht sinnvoll sich auf den Testdatensatz zu beschr√§nken."
      ],
      "metadata": {
        "id": "tOgLWAfTnNu0"
      },
      "id": "tOgLWAfTnNu0"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "\n",
        "# Spezifische Jahre definieren\n",
        "time_points = [1, 2, 5]  # Zeitpunkte in Jahren\n",
        "results = []\n",
        "\n",
        "predicted_survival_curves_x = optimal_model.predict_survival_function(X)\n",
        "\n",
        "for t in time_points:\n",
        "    # √úberlebenswahrscheinlichkeiten f√ºr den spezifischen Zeitpunkt berechnen\n",
        "    predicted_probs_at_time = np.array([sf(t) for sf in predicted_survival_curves_x])\n",
        "\n",
        "    # Maske f√ºr g√ºltige F√§lle\n",
        "    # Jeder der t oder weniger Jahre im Unternehmen war und bereits gegangen ist.\n",
        "    actual_status_at_time = np.where((y[\"time\"] <= t) & (y[\"event\"] == 0), 0, 1)\n",
        "    # √úber einer Wahrscheinlichkeit von 0.5 wird als survival und darunter als nicht survival Klassifiziert\n",
        "    actual_predictions = (predicted_probs_at_time >= 0.5).astype(int)\n",
        "\n",
        "    # Berechnen der Scores\n",
        "    accuracy = accuracy_score(actual_status_at_time, actual_predictions)\n",
        "    precision = precision_score(actual_status_at_time, actual_predictions, zero_division=0)\n",
        "    recall = recall_score(actual_status_at_time, actual_predictions, zero_division=0)\n",
        "\n",
        "    results.append({\n",
        "        \"time\": t,\n",
        "        \"Accuracy\": accuracy,\n",
        "        \"Precision\": precision,\n",
        "        \"Recall\": recall,\n",
        "    })\n",
        "\n",
        "# Anziegen der Resultate\n",
        "for res in results:\n",
        "    print(f\"Time {res['time']} year(s): \"\n",
        "          f\"Accuracy={res['Accuracy']:.2f}, \"\n",
        "          f\"Precision={res['Precision']:.2f}, \"\n",
        "          f\"Recall={res['Recall']:.2f}, \")"
      ],
      "metadata": {
        "id": "TYKv8aqXyi6N"
      },
      "id": "TYKv8aqXyi6N",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "f55beb13-92f2-49b1-ae95-e9c8552b1cf7",
      "metadata": {
        "id": "f55beb13-92f2-49b1-ae95-e9c8552b1cf7"
      },
      "source": [
        "Die Accuracy und die Precision des Modells starten mit guten Werten nehmen aber zunehmend ab, das Modell ist somit nur m√§√üig daf√ºr geeignet Vorhersagen √ºber l√§ngere Zeitr√§ume zu treffen. Wobei der Recall relativ hoch bleibt, das Modell erkennt also die Personen die gehen wollen aber bewertet auch viele die nicht gehen wollen als positives, es gibt also viele falsche Positive."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c5a65b04-fd08-4094-8da8-52ed4faf1966",
      "metadata": {
        "id": "c5a65b04-fd08-4094-8da8-52ed4faf1966"
      },
      "source": [
        "# Verbesserung der Durchschnitts√ºberlebenszeit"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In folgendem Teil suchen wir uns eine Person aus dem Trainingsdatensatz heraus. F√ºr diese Person berechnen wir die vorhergesagte durchschnittliche √úberlebenswahrscheinlichkeit und versuchen zu ermitteln, mit welchen Ver√§nderungen von Variablen man eine l√§ngere durchschnittliche √úberlebenswahrscheinlichkeit erzielen kann. Hierbei beschr√§nken wir uns auf Variablen, die der Arbeitgeber ver√§ndern kann."
      ],
      "metadata": {
        "id": "GbZk667QoR3W"
      },
      "id": "GbZk667QoR3W"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d79427a5-32b1-4e3e-aaf6-ff4ba16377fb",
      "metadata": {
        "id": "d79427a5-32b1-4e3e-aaf6-ff4ba16377fb"
      },
      "outputs": [],
      "source": [
        "# Erstellen einer einzigen Observation (Person)\n",
        "person_number = 1\n",
        "person = X_train.iloc[[person_number]]\n",
        "t_condition = y_train['time'][person_number]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6ed135e0-454b-4020-9d0b-6774719b16de",
      "metadata": {
        "id": "6ed135e0-454b-4020-9d0b-6774719b16de",
        "outputId": "24534a43-07b2-4769-ecfd-34ba6e9e840a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "9.63862308196837"
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "  from lifelines import KaplanMeierFitter\n",
        "\n",
        "  # Anpassen des Kaplan-Meier-Modells an die Trainings Daten\n",
        "  kmf_train = KaplanMeierFitter()\n",
        "  kmf_train.fit(y_train_time, event_observed=y_train_event)\n",
        "\n",
        "  # Vorhersage des urspr√ºnglichen Risikoscores und der Hazardratio\n",
        "  original_risk_score = optimal_model.predict(person)\n",
        "  original_hazard_ratio = np.exp(original_risk_score)\n",
        "\n",
        "  # Extrahiere die Basis-√úberlebenskurve\n",
        "  baseline_times = kmf_train.survival_function_.index.values  # Zeitpunkte der Basis-√úberlebensfunktion\n",
        "  baseline_survival = kmf_train.survival_function_.values.flatten()\n",
        "\n",
        "  # Erstellen einer Funktion umd dei verbeleibende √úberlebenszeit zu berechnen -> f√ºr jede person die weitere Zeit im unternehmen\n",
        "  def compute_conditional_expected_time(hazard_ratio, baseline_survival, baseline_times, t_condition):\n",
        "\n",
        "      # Finden der √úberlebenswahrscheinlichkeit bei t_condition\n",
        "      idx_condition = np.searchsorted(baseline_times, t_condition, side=\"right\") - 1\n",
        "      survival_prob_at_t_condition = baseline_survival[idx_condition]\n",
        "\n",
        "      # Passe die √úberlebenswahrscheinlichkeiten der Basisfunktion mithilfe der Hazardratio des Individuums an\n",
        "      adjusted_survival_probs = (baseline_survival / survival_prob_at_t_condition) ** hazard_ratio\n",
        "      adjusted_survival_probs[baseline_times <= t_condition] = 0\n",
        "\n",
        "      # Berechne die bedingte erwartete √úberlebenszeit\n",
        "      time_diffs = np.diff(np.append(0, baseline_times))\n",
        "      conditional_expected_time = np.sum(adjusted_survival_probs * time_diffs)\n",
        "      return conditional_expected_time\n",
        "\n",
        "  # Anwenden der Funktion\n",
        "  conditional_expected_survival_time = compute_conditional_expected_time(\n",
        "      original_hazard_ratio, baseline_survival, baseline_times, t_condition\n",
        "  )\n",
        "  conditional_expected_survival_time"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7cd0b206-628f-49b3-bfd9-993e42ae41a7",
      "metadata": {
        "collapsed": true,
        "id": "7cd0b206-628f-49b3-bfd9-993e42ae41a7",
        "outputId": "f4bdcadd-648f-4bbb-eefa-91f3d7cdd5f0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Ver√§nderung f√ºr die l√§ngste √úberlebenszeit: no_overtime\n"
          ]
        }
      ],
      "source": [
        "# Bef√∂rderung: YearsSinceLastPromotion, JobLevel\n",
        "person_higher_joblevel = person.copy()\n",
        "\n",
        "person_higher_joblevel['JobLevel'] = person_higher_joblevel['JobLevel'].astype(int)\n",
        "if (person_higher_joblevel['JobLevel'] != 5).any():\n",
        "    person_higher_joblevel['JobLevel'] += 1\n",
        "    person_higher_joblevel['YearsSinceLastPromotion'] = (0 - df_mean['YearsSinceLastPromotion']) / df_std['YearsSinceLastPromotion']\n",
        "person_higher_joblevel['JobLevel'] = person_higher_joblevel['JobLevel'].astype('category')\n",
        "\n",
        "changed_risk_score = optimal_model.predict(person_higher_joblevel)\n",
        "changed_hazard_ratio = np.exp(changed_risk_score)\n",
        "\n",
        "conditional_expected_survival_time_higher_joblevel = compute_conditional_expected_time(\n",
        "    changed_hazard_ratio, baseline_survival, baseline_times, t_condition\n",
        ")\n",
        "\n",
        "# OverTime\n",
        "person_no_overtime = person.copy()\n",
        "person_no_overtime['OverTime'] = 0\n",
        "person_no_overtime['OverTime'] = person_no_overtime['OverTime'].astype('category')\n",
        "\n",
        "changed_risk_score = optimal_model.predict(person_no_overtime)\n",
        "changed_hazard_ratio = np.exp(changed_risk_score)\n",
        "\n",
        "conditional_expected_survival_time_no_overtime = compute_conditional_expected_time(\n",
        "    changed_hazard_ratio, baseline_survival, baseline_times, t_condition\n",
        ")\n",
        "\n",
        "# Environment Satisfaction\n",
        "person_higher_environment_satisfaction = person.copy()\n",
        "\n",
        "person_higher_environment_satisfaction['EnvironmentSatisfaction'] = person_higher_environment_satisfaction['EnvironmentSatisfaction'].astype(int)\n",
        "if (person_higher_environment_satisfaction['EnvironmentSatisfaction'] != 4).any():\n",
        "    person_higher_environment_satisfaction['EnvironmentSatisfaction'] += 1\n",
        "person_higher_environment_satisfaction['EnvironmentSatisfaction'] = person_higher_environment_satisfaction['EnvironmentSatisfaction'].astype('category')\n",
        "\n",
        "changed_risk_score = optimal_model.predict(person_higher_environment_satisfaction)\n",
        "changed_hazard_ratio = np.exp(changed_risk_score)\n",
        "\n",
        "conditional_expected_survival_time_higher_environment_satsfaction = compute_conditional_expected_time(\n",
        "    changed_hazard_ratio, baseline_survival, baseline_times, t_condition\n",
        ")\n",
        "\n",
        "# StockOptionLevel\n",
        "person_higher_stockoption = person.copy()\n",
        "\n",
        "person_higher_stockoption['StockOptionLevel'] = person_higher_stockoption['StockOptionLevel'].astype(int)\n",
        "if (person_higher_stockoption['StockOptionLevel'] != 3).any():\n",
        "    person_higher_stockoption['StockOptionLevel'] += 1\n",
        "person_higher_stockoption['StockOptionLevel'] = person_higher_stockoption['StockOptionLevel'].astype('category')\n",
        "\n",
        "changed_risk_score = optimal_model.predict(person_higher_stockoption)\n",
        "changed_hazard_ratio = np.exp(changed_risk_score)\n",
        "\n",
        "conditional_expected_survival_time_higher_stockoption = compute_conditional_expected_time(\n",
        "    changed_hazard_ratio, baseline_survival, baseline_times, t_condition\n",
        ")\n",
        "\n",
        "\n",
        "# JobSatisfaction\n",
        "person_higher_jobsatisfaction = person.copy()\n",
        "\n",
        "person_higher_jobsatisfaction['JobSatisfaction'] = person_higher_jobsatisfaction['JobSatisfaction'].astype(int)\n",
        "if (person_higher_jobsatisfaction['JobSatisfaction'] != 4).any():\n",
        "    person_higher_jobsatisfaction['JobSatisfaction'] += 1\n",
        "person_higher_jobsatisfaction['JobSatisfaction'] = person_higher_jobsatisfaction['JobSatisfaction'].astype('category')\n",
        "\n",
        "changed_risk_score = optimal_model.predict(person_higher_jobsatisfaction)\n",
        "changed_hazard_ratio = np.exp(changed_risk_score)\n",
        "\n",
        "conditional_expected_survival_time_jobsatisfaction = compute_conditional_expected_time(\n",
        "    changed_hazard_ratio, baseline_survival, baseline_times, t_condition\n",
        ")\n",
        "conditional_expected_survival_time_jobsatisfaction\n",
        "\n",
        "\n",
        "def get_max_variable_name_from_values(**kwargs):\n",
        "    max_variable = max(kwargs, key=kwargs.get)  # Get the key with the maximum value\n",
        "    return max_variable\n",
        "# Finden der l√§ngsten \"√úberlebenszeit\"\n",
        "max_variable = get_max_variable_name_from_values(\n",
        "    no_overtime=conditional_expected_survival_time_no_overtime,\n",
        "    higher_jobsatisfaction=conditional_expected_survival_time_jobsatisfaction,\n",
        "    promotion=conditional_expected_survival_time_higher_joblevel,\n",
        "    higher_environment_satisfaction=conditional_expected_survival_time_higher_environment_satsfaction,\n",
        "    higher_stockoption_level=conditional_expected_survival_time_higher_stockoption\n",
        ")\n",
        "\n",
        "print(f\"Ver√§nderung f√ºr die l√§ngste √úberlebenszeit: {max_variable}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Leider trifft das Modell bei den meisten Personen die gleiche Aussage, und zwar, dass Overtime verringert werden soll. Wir haben dieses Tool also nicht mit auf die Website √ºbernommen. Auf der Website kann man selbst die Variablen jeder Person anpassen und beobachten, wie sich dies auf die durchschnittliche √úberlebenszeit auswirkt."
      ],
      "metadata": {
        "id": "JiUK0rg9pYpO"
      },
      "id": "JiUK0rg9pYpO"
    },
    {
      "cell_type": "markdown",
      "id": "33259603-9c84-447f-9ef2-7e63c5f6fec7",
      "metadata": {
        "id": "33259603-9c84-447f-9ef2-7e63c5f6fec7"
      },
      "source": [
        "# Visualisierung der Survival Curve"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f92a6ff4-74ca-4af6-864a-6a18114098de",
      "metadata": {
        "collapsed": true,
        "id": "f92a6ff4-74ca-4af6-864a-6a18114098de",
        "outputId": "878ac841-12bd-4440-e061-51ba9961a9c0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Get the survival function for the first person in the training dataset\n",
        "survival_function = optimal_model.predict_survival_function(person)\n",
        "\n",
        "# Plot the survival curve\n",
        "plt.figure(figsize=(10, 6))\n",
        "for fn in survival_function:\n",
        "    plt.step(fn.x, fn.y, where=\"post\", label=\"Survival Curve\")\n",
        "\n",
        "plt.title(\"Survival Curve for the First Person in the Training Dataset\")\n",
        "plt.xlabel(\"Time (Years at Company)\")\n",
        "plt.ylabel(\"Survival Probability\")\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Verbesserung des PerformanceRatings\n",
        "\n",
        "Im folgenden Modell versuchen wir herauszufinden, wie man neben der Zeit im Unternehmen auch die Performance der Angestellten erh√∂hen kann."
      ],
      "metadata": {
        "id": "JDuMM8tJV-Wk"
      },
      "id": "JDuMM8tJV-Wk"
    },
    {
      "cell_type": "code",
      "source": [
        "#Explorative Analyse der Variablen\n",
        "\n",
        "# Korrelation von numerischen Variablen\n",
        "numerical_features = df.select_dtypes(include=['int64', 'float64'])\n",
        "correlation_matrix = numerical_features.corr()\n",
        "\n",
        "# Visualisierung\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap=\"coolwarm\")\n",
        "plt.title(\"Korrelationsmatrix der numerischen Features\")\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Beispiel: Verteilung von Attrition nach PerformanceRating\n",
        "sns.countplot(data=df, x='PerformanceRating', hue='Attrition')\n",
        "plt.title(\"Verteilung von Attrition nach PerfromanceRating\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "xJJJNdPS8ano"
      },
      "id": "xJJJNdPS8ano",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Regressionsmodell f√ºr performanceRating\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n",
        "\n",
        "# Zielvariablen\n",
        "X = df.drop(['PerformanceRating'], axis =1)\n",
        "y_performance = df['PerformanceRating']\n",
        "\n",
        "# Daten aufteilen (z. B. f√ºr PerformanceRating)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_performance, test_size=0.3, random_state=42)\n",
        "\n",
        "# Modell f√ºr Performance trainieren (z. B. Random Forest Regressor)\n",
        "regressor = RandomForestRegressor(random_state=42)\n",
        "regressor.fit(X_train, y_train)\n",
        "\n",
        "# Feature-Importanz\n",
        "importances = regressor.feature_importances_\n",
        "features = X.columns\n",
        "\n",
        "# Visualisierung\n",
        "sns.barplot(x=importances, y=features)\n",
        "plt.title(\"Feature-Importanz f√ºr PerformanceRating\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Yr3aVtHKV9He"
      },
      "id": "Yr3aVtHKV9He",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Das Modell soll zeigen wie performanceRating durch percentsalaryhike vorhergesagt wird.\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "import pandas as pd\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Angenommen, df ist dein DataFrame und PerformanceRating ist die Zielvariable\n",
        "X = df[['PercentSalaryHike']]\n",
        "y = df['PerformanceRating']\n",
        "\n",
        "# Aufteilen der Daten in Trainings- und Testdaten\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Modell trainieren\n",
        "model = RandomForestRegressor(random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Vorhersage\n",
        "predictions = model.predict(X_test)\n",
        "\n",
        "# Modellbewertung\n",
        "mse = mean_squared_error(y_test, predictions)  # Mean Squared Error\n",
        "r2 = r2_score(y_test, predictions)  # R¬≤-Wert\n",
        "\n",
        "# Ausgabe der Modellbewertung\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R¬≤-Wert: {r2}\")\n",
        "\n",
        "# Visualisierung der Vorhersagen vs. tats√§chliche Werte\n",
        "plt.scatter(X_test, y_test, color='blue', label='Tats√§chliche Werte')\n",
        "plt.scatter(X_test, predictions, color='red', label='Vorhergesagte Werte')\n",
        "plt.xlabel('Percent Salary Hike')\n",
        "plt.ylabel('Performance Rating')\n",
        "plt.title('Vorhersage von Performance Rating durch Percent Salary Hike')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Feature-Importanz anzeigen\n",
        "importances = model.feature_importances_\n",
        "print(\"Feature Importances: \", importances)\n",
        "\n",
        "\n",
        "# Funktion, die die Vorhersage f√ºr ein bestimmtes percentsalaryhike berechnet\n",
        "def predict_performance_rating(salary_hike):\n",
        "    return model.predict([[salary_hike]])[0]\n",
        "\n",
        "# Optimierung: Findet den percentsalaryhike, der PerformanceRating 4 erreicht\n",
        "def find_salary_hike_for_rating(target_rating):\n",
        "    low, high = 0, 100  # Annahme, dass der percentsalaryhike zwischen 0 und 100 liegt\n",
        "    tolerance = 0.01\n",
        "\n",
        "    while high - low > tolerance:\n",
        "        mid = (low + high) / 2\n",
        "        predicted_rating = predict_performance_rating(mid)\n",
        "\n",
        "        if predicted_rating < target_rating:\n",
        "            low = mid\n",
        "        else:\n",
        "            high = mid\n",
        "\n",
        "    return (low + high) / 2\n",
        "\n",
        "# Finde den percentsalaryhike, der PerformanceRating 4 ergibt\n",
        "required_salary_hike = find_salary_hike_for_rating(4)\n",
        "print(f\"Der erforderliche Salary Hike f√ºr PerformanceRating 4 ist: {required_salary_hike}\")\n"
      ],
      "metadata": {
        "id": "4EyXCvPLk3Zp"
      },
      "id": "4EyXCvPLk3Zp",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.14"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}